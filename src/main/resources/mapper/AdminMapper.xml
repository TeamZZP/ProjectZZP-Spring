<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="AdminMapper">
  
<!-- 총 판매액 -->
<select id="getTotalSales" resultType="double">
	select NVL(sum(total_price),0) from orders
</select>
<!-- 오늘 판매액 -->
<select id="getTodaySales" resultType="double">
	select NVL(sum(total_price),0) from orders
	where TO_CHAR(order_date,'YY/MM/DD') = TO_CHAR(CURRENT_TIMESTAMP, 'YY/MM/DD')
</select>
<!-- 총 회원 -->
<select id="getTotalMember" resultType="int">
	select count(*) from member
</select>
<!-- 오늘 가입한 회원 -->
<select id="getTodayMember" resultType="int">
	select count(*) from member
	where TO_CHAR(created_at,'YY/MM/DD') = TO_CHAR(CURRENT_TIMESTAMP, 'YY/MM/DD')
</select>

<!-- 오늘 방문자수 -->
<select id="countVisitToday" resultType="int">
	select NVL(
		(select count from counter 
		where TO_CHAR(count_date,'YY/MM/DD') = TO_CHAR(CURRENT_DATE,'YY/MM/DD')), 0)
    from dual
</select>
<!-- 총 방문자 -->
<select id="getTotalVisitor" resultType="int">
	select sum(count) from counter
</select>
<!-- 어제 방문자수 -->
<select id="countVisitYesterday" resultType="int">
	select NVL(
		(select count from counter 
		where TO_CHAR(count_date,'YY/MM/DD') = TO_CHAR(CURRENT_DATE-1,'YY/MM/DD')), 0)
    from dual
</select>
<!-- 방문자수 추가 -->
<insert id="addVisit">
	insert into counter (count, count_date) 
	values (1, CURRENT_DATE)
</insert>
<!-- 방문자수 수정 -->
<update id="updateVisit">
	update counter 
	set count=count+1
	where TO_CHAR(count_date,'YY/MM/DD') = TO_CHAR(CURRENT_DATE,'YY/MM/DD')
</update>

<!-- 신규 주문 -->
<select id="selectNewOrders" resultType="ProductOrderImagesDTO">
	select * from orders o join product p using(p_id)
	where to_char(order_date, 'YY/MM/DD') = TO_CHAR(CURRENT_DATE,'YY/MM/DD')
</select>
<!-- 신규 회원 -->
<select id="selectNewMembers" resultType="MemberDTO">
	select * from member
	where to_char(created_at, 'YY/MM/DD') = TO_CHAR(CURRENT_DATE,'YY/MM/DD')
</select>
<!-- 답변대기 문의 -->
<select id="selectNewQuestion" resultType="QuestionDTO">
	select * from question
	where q_status='답변대기'
	order by q_id desc
</select>

<!-- 월별 실적 -->
<select id="getMonthlySales" resultType="hashmap">
	select TO_CHAR(order_date, 'YYYY.MM') as month, SUM(total_price) as sum from orders
	group by TO_CHAR(order_date, 'YYYY.MM')
	having TO_CHAR(order_date, 'YYYY.MM') > TO_CHAR(ADD_MONTHS(CURRENT_TIMESTAMP, -4), 'YYYY.MM')
	order by TO_CHAR(order_date, 'YYYY.MM')
</select>
<!-- 카테고리별 판매 비율 -->
<select id="getSalesCategory" resultType="hashmap">
	select c_name as category, sum(total_price) as sum
	from orders o join product p using(p_id)
	join category c using(c_id)
	group by c_name
	order by sum desc
</select>


<!-- 회원관리 : 전체 회원 목록 -->
<select id="selectAllMember" resultType="AddressDTO" parameterType="hashmap">
	select m.userid, m.username, m.phone, a.post_num, a.addr1, a.addr2, m.created_at
	from member m join address a
	on m.userid = a.userid
	<where>
		a.default_chk = 1
		<if test="searchName != null and !searchName.equals('') and searchName.equals('addr1')">
			and	a.${searchName} like '%${searchValue}%'
		</if>
		<if test="searchName != null and !searchName.equals('') and !searchName.equals('addr1')">
			and	upper(m.${searchName}) like upper('%${searchValue}%')
		</if>
	</where>
	order by
	<if test="sortBy != null and !sortBy.equals('')">
		${sortBy},
	</if>
	created_at
</select>

<!-- 회원관리 : 전체 회원 목록 페이징 countTotal -->
<select id="countTotalMember" parameterType="hashmap" resultType="int">
	select count(*)
	from member m join address a
	on m.userid = a.userid
	<where>
		a.default_chk = 1
		<if test="searchName != null and !searchName.equals('') and searchName.equals('addr1')">
			and	a.${searchName} like '%${searchValue}%'
		</if>
		<if test="searchName != null and !searchName.equals('') and !searchName.equals('addr1')">
			and	upper(m.${searchName}) like upper('%${searchValue}%')
		</if>
	</where>
</select>

<!-- 회원 이름, 연락처 수정 -->
<update id="updateMember" parameterType="hashmap">
	update member
	set username = #{username},
		phone = #{phone}
	where userid = #{userid}
</update>


<!-- 상품관리 : 전체 상품 목록 -->
<select id="selectAllProduct" parameterType="hashmap" resultType="ProductByCategoryDTO">
 	select (select C_NAME from category where c_id = product.c_id) as c_name, P_ID,(select IMAGE_ROUTE from images where p_id = product.p_id 
	and IMAGE_RNK = 1) as p_image, P_NAME, P_CONTENT, C_ID, P_COST_PRICE
	, P_SELLING_PRICE, P_DISCOUNT, to_char(P_CREATED,'yyyy-mm-dd') P_CREATED, P_STOCK from product
	<where>
		<if test='searchName=="c_id"'>
			upper((select C_NAME from category where c_id = product.C_ID)) like upper('%${searchValue}%')
		</if>
		<if test='searchName=="p_created"'>
			to_char(product.p_created,'yyyy-mm-dd') like '%${searchValue}%'
		</if>
		<if test='searchName!=null and !searchName.equals("") and !searchName.equals("c_id") and searchName!="c_id"  and !searchName.equals("p_created") and searchName!="p_created"'>
			${searchName} like '%${searchValue}%'
		</if>
	</where>
	order by
		<if test='sortBy!=null and !sortBy.equals("")'>
			${sortBy} desc,
		</if>
	 p_id desc
</select>
  
<!-- 상품관리 : 전체 상품 목록 페이징 countTotal -->
<select id="countTotalAdmin" resultType="int" parameterType="hashmap">
 select count(*) from product 
	<where>
		<if test='searchName=="c_id"'>
			upper((select C_NAME from category where c_id = product.C_ID)) like upper('%${searchValue}%')
		</if>
		<if test='searchName=="p_created"'>
			to_char(product.p_created,'yyyy-mm-dd') like upper('%${searchValue}%')
		</if>
		<if test='searchName!=null and !searchName.equals("") and !searchName.equals("c_id") and !searchName.equals("p_created") and searchName!="p_created"'>
			${searchName} like '%${searchValue}%'
		</if>
	</where>
</select>

<!-- 상품 삭제 -->
<delete id="deleteProduct" parameterType="list">
	delete from product where p_id in
		<foreach item="p_id" collection="list" open="(" separator="," close=")">
			#{p_id}
		</foreach>
</delete>

<!-- 상품 삭제 : 이미지 -->
<select id="productImages" parameterType="list" resultType="ImagesDTO">
	select * from images where p_id in
		<foreach item="p_id" collection="list" open="(" separator="," close=")">
			#{p_id}
		</foreach>
</select>

<!-- 상품 수정페이지(상품)-->
<select id="productRetrieve" parameterType="int" resultType="ProductDTO">
	select * from product where p_id = #{p_id}
</select>

<!-- 상품 수정페이지(이미지)-->
<select id="ImagesRetrieve" parameterType="int" resultType="ImagesDTO">
    select * from images where p_id = #{p_id}
</select>

<!-- 상품 등록 -->
<insert id="insertProduct">
	insert all
	into product (p_id,
		p_name,
		p_content,
		c_id,
		p_cost_price,
		p_selling_price,
		p_discount,
		p_created,
		p_stock,
		userid)
	values (product_p_id_seq.NEXTVAL,
		#{p_name},
		#{p_content},
		#{c_id},
		#{p_cost_price},
		#{p_selling_price},
		#{p_discount},
		sysdate,
		#{p_stock},
		'admin1')
	into images (p_id,
		image_rnk,
		image_route,
		userid,
		update_date)
	<if test='image_rnk1==1'>
		values (product_p_id_seq.NEXTVAL, #{image_rnk1}, #{image_route_1}, 'admin1', sysdate )
	</if>
	into images (p_id,
		image_rnk,
		image_route,
		userid,
		update_date)
	<if test='image_rnk2==2'>
		values (product_p_id_seq.NEXTVAL, #{image_rnk2}, #{image_route_2}, 'admin1', sysdate )
	</if>
	into images (p_id,
		image_rnk,
		image_route,
		userid,
		update_date)
	<if test='image_rnk3==3'>
		values (product_p_id_seq.NEXTVAL, #{image_rnk3}, #{image_route_3}, 'admin1', sysdate )
	</if>
	into images (p_id,
		image_rnk,
		image_route,
		userid,
		update_date)
	<if test='image_rnk4==4'>
		values (product_p_id_seq.NEXTVAL, #{image_rnk4}, #{image_route_4}, 'admin1', sysdate )
	</if>
	select * from dual
</insert>

<!-- 상품 수정 -->
<update id="updateProduct" parameterType="hashmap">
	update product
	set p_name=#{p_name}, p_stock=#{p_stock}, c_id=#{c_id}, p_cost_price=#{p_cost_price}, p_selling_price=#{p_selling_price},
		p_content=#{p_content}, p_discount=#{p_discount}
	where p_id=#{p_id}
</update>

<!-- 상품 수정(기존 이미지 삭제) -->
<delete id="deleteImages" parameterType="hashmap">
	delete from images where p_id in #{p_id}
</delete>

<!-- 상품 수정(새 이미지 등록) -->
<insert id="insertImages" parameterType="hashmap">
insert all
	into images (p_id,
		image_rnk,
		image_route,
		userid,
		update_date)
	<if test='image_rnk1==1'>
		values (#{p_id}, #{image_rnk1}, #{image_route_1}, 'admin1', sysdate )
	</if>
	into images (p_id,
		image_rnk,
		image_route,
		userid,
		update_date)
	<if test='image_rnk2==2'>
		values (#{p_id}, #{image_rnk2}, #{image_route_2}, 'admin1', sysdate )
	</if>
	into images (p_id,
		image_rnk,
		image_route,
		userid,
		update_date)
	<if test='image_rnk3==3'>
		values (#{p_id}, #{image_rnk3}, #{image_route_3}, 'admin1', sysdate )
	</if>
	into images (p_id,
		image_rnk,
		image_route,
		userid,
		update_date)
	<if test='image_rnk4==4'>
		values (#{p_id}, #{image_rnk4}, #{image_route_4}, 'admin1', sysdate )
	</if>
	select * from dual
</insert>


<!-- 주문 상태 변경 -->
<update id="updateOrder">
	update orders
	set order_state=#{status}
	where concat(order_id, p_id)=#{id}
</update>

<!-- 주문 관리 : 전체 조회 -->
<select id="selectAllOrders" parameterType="hashmap" resultType="ProductOrderImagesDTO">
	select * from orders o join product p using(p_id)
	<where>
	  <if test='searchName!=null and !searchName.equals("null")'>
	 	${searchName} like '%${searchValue}%'
	  </if>
	  <if test='status!=null and !status.equals("null")'> 
 	  	and order_state=#{status}
	  </if>
	</where>
	order by order_id desc
</select>
<select id="countTotalOrders" parameterType="hashmap" resultType="int">
	select count(*) from orders o join product p using(p_id)
	<where>
	  <if test='searchName!=null and !searchName.equals("null")'>
	 	${searchName} like '%${searchValue}%'
	  </if>
	  <if test='status!=null and !status.equals("null")'> 
 	  	and order_state=#{status}
	  </if>
	</where>
</select>


<!-- 챌린지 등록 -->
<insert id="insertAdminChallenge" parameterType="hashmap">
	insert all 
	into challenge (chall_id, 
			userid, 
			chall_title, 
			chall_content, 
			chall_category, 
			chall_hits, 
			chall_liked, 
			chall_created, 
			chall_img,
			chall_comments,
			chall_this_month)
	    values 
			(challenge_chall_id_seq.NEXTVAL, 
			#{userid}, 
			#{chall_title}, 
			#{chall_content}, 
			#{chall_category}, 
			0, 
			0, 
			CURRENT_TIMESTAMP, 
			#{chall_img},
			0,
			1)
	into stamp (stamp_id,
			chall_id,
			stamp_img,
			stamp_name,
			stamp_content)
		values
			(stamp_stamp_id_seq.NEXTVAL,
			challenge_chall_id_seq.NEXTVAL,
			#{stamp_img},
			#{stamp_name},
			#{stamp_content})
	into member_stamp (userid,
			stamp_id,
			chall_id,
			stamp_created)
	values
			(#{userid},
			stamp_stamp_id_seq.NEXTVAL,
			challenge_chall_id_seq.NEXTVAL,
			CURRENT_TIMESTAMP)
	select * from dual
</insert>

<!-- 이달의 챌린지 변경 -->
<update id="updateChallThisMonth" parameterType="hashmap">
	update challenge
	set chall_this_month=${after}
	where chall_this_month=${before}
	<if test="before == 0">
	and chall_id=(select max(chall_id) from challenge
					where userid='admin1')
	</if>
</update>

<!-- 도장 수정 -->
<update id="updateStamp" parameterType="hashmap">
	update stamp
	set stamp_img=#{stamp_img},
		stamp_name=#{stamp_name},
		stamp_content=#{stamp_content}
	where chall_id=#{chall_id}
</update>


<!-- 신고 관리(전체 조회) -->
<select id="selectAllReport" parameterType="hashmap" resultType="com.dto.ReportDTO">
	select r.report_id,
			r.userid,
			case when r.chall_id is not null then '게시글'
       			when r.comment_id is not null then '댓글'
        		end report_category,
			r.chall_id,
			r.comment_id,
			case r.report_reason 
		        when 1 then '지나친 광고성 글'
		        when 2 then '스팸홍보/도배 글'
		        when 3 then '욕설/비방이 심함'
		        when 4 then '외설적인 글'
		        when 5 then '개인정보 노출'
		        when 6 then '저작권 침해가 우려됨'
		        when 7 then '기타'
		        end report_reason,
			case r.report_status 
		        when 0 then '처리 대기'
		        when 1 then '처리 완료'
		        end report_status,
			r.report_created,
			r.reported_userid, 
			COALESCE(ch.chall_title, co.comment_content, '(삭제된 글입니다)') content
	from report r, challenge ch, comments co 
	where r.chall_id=ch.chall_id (+)
	and r.comment_id=co.comment_id (+)
 	  <if test='searchName!=null and !searchName.equals("null")'>
	 	and ${searchName} like '%${searchValue}%'
	  </if>
	  <if test='status!=null and !status.equals("null")'> 
 	  	and report_status=${status}
	  </if>
	order by report_id desc
</select>
<select id="countTotalReport" parameterType="hashmap" resultType="int">
	select count(*) 
	from report r, challenge ch, comments co 
	where r.chall_id=ch.chall_id (+)
	and r.comment_id=co.comment_id (+)
 	  <if test='searchName!=null and !searchName.equals("null")'>
	 	and ${searchName} like '%${searchValue}%'
	  </if>
	  <if test='status!=null and !status.equals("null")'> 
 	  	and report_status=${status}
	  </if>
</select>

<!-- 신고 상세 보기 -->
<select id="selectOneReport" resultType="ReportDTO">
	select * from report
	where report_id=#{report_id}
</select>

<!-- 신고 삭제 -->
<delete id="deleteReport" parameterType="list">
	delete from report
	where report_id in
	<foreach item="id" collection="list" open="(" separator="," close=")">
		#{id}
	</foreach>
</delete>

<!-- 신고 상태 변경 -->
<update id="updateReport" parameterType="hashmap">
	update report
	set report_status=#{status}
	where report_id=#{id}
</update>

<!-- 신고된 댓글의 챌린지 게시글 번호 구하기 -->
<select id="selectChallIdFromComment" resultType="int">
	select chall_id from comments
	where comment_id=#{comment_id}
</select>


</mapper>
  