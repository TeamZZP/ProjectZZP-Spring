<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ChallengeMapper">

<insert id="insertChallenge" parameterType="hashmap">
	insert all
	into challenge 
		(chall_id, 
		userid, 
		chall_title, 
		chall_content, 
		chall_category, 
		chall_hits, 
		chall_liked, 
		chall_created, 
		chall_img,
		chall_comments,
		chall_this_month) 
	values 
		(challenge_chall_id_seq.NEXTVAL, 
		#{userid}, 
		#{chall_title}, 
		#{chall_content}, 
		#{chall_category}, 
		0, 
		0, 
		CURRENT_TIMESTAMP, 
		#{chall_img},
		0,
		0)
	<if test='chall_category=="이 달의 챌린지"'>
	into member_stamp
		(userid,
		stamp_id,
		chall_id,
		stamp_created)
	values
		(#{userid},
		(select stamp_id from stamp join challenge using(chall_id) where chall_this_month=1),
		challenge_chall_id_seq.NEXTVAL,
		CURRENT_TIMESTAMP)
	</if>
	select * from dual
</insert>

<select id="selectAllChallenge" parameterType="hashmap" resultType="ChallengeDTO">
	select * 
	from challenge c 
	LEFT OUTER JOIN profile p on c.userid=p.userid
	LEFT OUTER JOIN member_stamp m on c.chall_id=m.chall_id
	LEFT OUTER JOIN stamp s on m.stamp_id=s.stamp_id
	<where>
	  <if test='searchName!=null and !searchName.equals("")'>
	 	and ${searchName} like '%${searchValue}%'
	  </if>
	</where>
	order by 
	<if test='sortBy!=null and !sortBy.equals("")'>
		${sortBy} desc,
	</if>
	c.chall_id desc
</select>

<select id="countTotalChall" parameterType="hashmap" resultType="int">
	select count(*) 
	from challenge c 
	<where>
	  <if test='searchName!=null and !searchName.equals("")'>
	 	and ${searchName} like '%${searchValue}%'
	  </if>
	</where>
</select>

<select id="selectChallThisMonth" resultType="ChallengeDTO">
	select * from challenge
	where chall_this_month=1
</select>

<select id="selectLikedChall" resultType="int">
	select chall_id from chall_liked 
	where userid=#{userid}
</select>


<!-- 메인 : 뉴 챌린지 -->
<select id="selectNewChallenge" resultType="ChallengeDTO">
	select * from challenge order by chall_id desc
</select>


<update id="updateChallHits">
	update challenge
	set chall_hits=chall_hits+1
	where chall_id=#{chall_id}
</update>

<select id="selectOneChallenge" resultType="ChallengeDTO">
	select * 
	from challenge c 
	LEFT OUTER JOIN profile p on c.userid=p.userid
	LEFT OUTER JOIN member_stamp m on c.chall_id=m.chall_id
	LEFT OUTER JOIN stamp s on m.stamp_id=s.stamp_id
	where c.chall_id = #{chall_id}
</select>

<update id="updateChallenge" parameterType="hashmap">
	update challenge
	set chall_category=#{chall_category},
		chall_title=#{chall_title},
		chall_img=#{chall_img},
		chall_content=#{chall_content}
	where chall_id=#{chall_id}
</update>

<delete id="deleteChallenge">
	delete from challenge
	where chall_id=#{chall_id}
</delete>



<!-- 댓글 -->
<select id="selectAllComments" resultType="CommentsDTO">
	select c.*, p.profile_img, parent.userid as parent_userid
	from comments c 
	JOIN profile p ON c.userid=p.userid
	LEFT OUTER JOIN comments parent ON c.parent_id=parent.comment_id
	where c.chall_id=#{chall_id}
	order by c.group_order desc, c.step
</select>

<insert id="insertComment" parameterType="CommentsDTO">
	insert into comments
		(comment_id,
		chall_id,
		comment_content,
		comment_created,
		userid,
		parent_id,
		group_order,
		step
		)
	values 
		(comments_comment_id_seq.NEXTVAL, 
		#{chall_id}, 
		#{comment_content}, 
		CURRENT_TIMESTAMP, 
		#{userid},
		0,
		(select nvl(max(group_order),0)+1 from comments where chall_id=#{chall_id}),
		0
		)
</insert>

<insert id="insertReply" parameterType="CommentsDTO">
	insert into comments
		(comment_id,
		chall_id,
		comment_content,
		comment_created,
		userid,
		parent_id,
		group_order,
		step
		)
	values 
		(comments_comment_id_seq.NEXTVAL, 
		#{chall_id}, 
		#{comment_content}, 
		CURRENT_TIMESTAMP, 
		#{userid},
		#{parent_id},
		#{group_order},
		(	select max(step)+1 from comments 
			where chall_id=#{chall_id} 
			and group_order=#{group_order}
			)
		)
</insert>

<update id="updateChallComments">
	update challenge
	set chall_comments=(select count(*) from comments
						where chall_id=#{chall_id})
	where chall_id=#{chall_id}
</update>

<select id="countComments" resultType="int">
	select chall_comments from challenge
	where chall_id=#{chall_id}
</select>

<delete id="deleteAllComments">
	delete from comments
	where comment_id in 
		(	select comment_id from comments
			start with comment_id=#{comment_id}
			connect by prior comment_id=parent_id
		)
</delete>

<update id="updateComment" parameterType="com.dto.CommentsDTO">
	update comments
	set comment_content=#{comment_content}
	where comment_id=#{comment_id}
</update>

<select id="getNewestComment" resultType="int">
	select MAX(comment_id) from comments 
	where userid=#{userid}
</select>

<select id="getCommentPage" parameterType="hashmap" resultType="int">
	select TRUNC((num-0.1)/5)+1 as page
	from (
	    select 
	    ROW_NUMBER() OVER(order by group_order desc, step) as num, c.*
	    from comments c
	    where chall_id=#{chall_id}
	)
	where comment_id=#{comment_id}
</select>




<select id="countLikedByMap" resultType="int">
	select count(*) from chall_liked
	where chall_id=#{chall_id} and userid=#{userid}
</select>

<select id="countLiked" resultType="int">
	select chall_liked from challenge
	where chall_id=#{chall_id}
</select>

<insert id="insertLike" parameterType="hashmap">
	insert into chall_liked (chall_id, userid)
	values (#{chall_id}, #{userid})
</insert>

<delete id="deleteLike" parameterType="hashmap">
	delete from chall_liked
	where chall_id=#{chall_id} and userid=#{userid}
</delete>

<update id="updateChallLiked">
	update challenge
	set chall_liked=(select count(*) from chall_liked 
					where chall_id=#{chall_id})
	where chall_id=#{chall_id}
</update>




<select id="selectProfileImg" resultType="string">
	select profile_img from profile
	where userid=#{userid}
</select>



<select id="checkReportExist" parameterType="hashmap" resultType="int">
	select count(*) from report
	where userid=#{userid} 
	and
	<if test="chall_id != ''">
		chall_id=#{chall_id}
	</if>
	<if test="comment_id != ''">
		comment_id=#{comment_id}
	</if>
</select>

<insert id="insertReport" parameterType="hashmap">
	insert into report
		(report_id,
		userid,
		<if test="chall_id != ''">
		chall_id,
		reported_userid,
		</if>
		<if test="comment_id != ''">
		comment_id,
		reported_userid,
		</if>
		report_reason,
		report_status,
		report_created)
	values
		(report_report_id_seq.NEXTVAL,
		#{userid},
		<if test="chall_id != ''">
		#{chall_id},
		(select userid from challenge where chall_id=#{chall_id}),
		</if>
		<if test="comment_id != ''">
		#{comment_id},
		(select userid from comments where comment_id=#{comment_id}),
		</if>
		#{report_reason},
		0,
		CURRENT_TIMESTAMP)
</insert>



</mapper>